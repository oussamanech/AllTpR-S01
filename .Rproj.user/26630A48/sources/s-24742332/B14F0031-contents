library(dplyr)
library(tidyr)
library(ggplot2)
library(maps)

#Создайте с помощью функции plot() идентичный график:
#Сохраните его в папке Plots
#Сформируйте нормально распределенную совокупность x.norm из 200
#наблюдений со средним значением 0 и стандартным отклонением 10.
x <- rnorm(n = 200, mean = 0, sd  = 10)

png(file = "Plots/lr4_2.png", bg = "transparent")
plot(x)
hist(x)
hist(x,breaks = 15)
dev.off()
#Загрузите dataset mpg из пакета ggplot2. Ознакомьтесь с переменными.
ggplot(data = mpg)
?mpg

#1. Постройте диаграмму рассеяния hwy от cyl.
ggplot(mpg, aes(x=cyl, y=hwy )) + geom_point()
#Постройте такую же диаграмму с параметром position = "jitter", проанализируйте разницу.
ggplot(mpg, aes(x=cyl, y=hwy )) + geom_point(position='jitter',)
## разницы position
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = "blue"))
#Точки не синие, потому что «blue» интерпретируется как вектор (`c (« blue »)`) 
#для отображения на эстетику, точно так же, как hwy или displ. 
#Чтобы вручную переопределить цвет, сопоставление можно разместить за пределами aes.
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), colour = "blue")

#3. Отобразите через параметры color, size, и shape поочередно количественные и
#качественные переменные. Сравните, как aesthetics ведет себя в каждом случае.
#--------------------
#shape: не может принимать непрерывную переменную, потому что формы не упорядочены.
#size: отображает переменную в область метки` scale_radius` может использоваться для сопоставления с радиусом.
#colour: сопоставляет переменную с насыщенностью цвета синей метки.
#Другие сопоставления могут быть достигнуты с помощью `scale_color_continuous`

#4. Что будет, если отобразить через несколько параметров aesthetics одну и ту же переменную?
#Вы можете без проблем представить переменную с несколькими эстетиками. Например, использование формы и цвета 
#для одной дискретной переменной означает, что ваш график по-прежнему будет читаться в черно-белом режиме.

#5. Для чего предназначена stroke aesthetic?
# stroke управляет шириной границы для фигур, у которых она есть.

#6. Что будет, если отобразить через aesthetic не переменную, а, например, aes(colour = displ < 5)?
#Эстетические сопоставления обрабатываются как выражения, которые должны оцениваться в контексте аргумента `data`
#,поэтому он будет оценивать выражение и строить график результата.
ggplot(data = mpg) + geom_point(aes(x = cty, y = hwy, colour = displ < 5))

#7. Что произойдет, если построить facet по количественной переменной?
## Вы получите одну строку или столбец для каждого уникального значения переменной.
## Это может быть очень медленным для переменных, которые принимают много значений.

#8. Какой параметр задает . (точка) для следующих графиков?
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(drv ~ .)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(. ~ cyl)
##`.` - это просто заполнитель, поэтому мы можем иметь фасет только в одном измерении.
##Это необходимо, потому что иногда односторонние формулы могут вызывать проблемы.

#9. Для чего используется параметр se в geom_smooth()?
##`se` указывает, следует ли добавлять полупрозрачный фон, показывающий доверительный интервал.

#10. Напишите код для создания следующих графиков:
#11. Для чего предназначен geom_col(), чем он отличается от geom_bar()?
##geom_col оставляет данные как есть. `geom_bar ()` создает две переменные (count и prop), 
##а затем отображает данные подсчета на оси y.
##С помощью geom_col вы можете построить график значений любой переменной x относительно любой переменной y.

#12. Как можно улучшить следующий график?
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) + geom_point()
#->  используя position_jitter, делая точки прозрачными и добавляя линию.
ggplot(data = mpg, mapping = aes(x = cty, y = hwy))+ geom_point(position = 'jitter', alpha=0.5) + geom_smooth(method='lm')

#13. Преобразуйте stacked bar chart в круговую диаграмму с помощью coord_polar().
ggplot(mpg, aes(x = 1, fill=factor(drv))) + 
  geom_bar(width=1, stat='count') 
## v2 с помощью coord_polar()
ggplot(mpg, aes(x = 1, fill=factor(drv))) + 
  geom_bar(width=1, stat='count') +
  coord_polar(theta='y')

#14. В чем разница между coord_quickmap() и coord_map()?
##->coord_quickmap(): использует приближение к проекции меркатора,
##->в то время как "coord_map()"  может использовать множество проекций из пакета `mapproj`.
##->Это означает, что «coord_quickmap()» работает быстрее и не требует дополнительных пакетов,
##->но не так точен и не будет работать вдали от экватора.


#15. Какие выводы можно сделать из следующего графика о взаимоотношении потребления топлива на трассе и в городе? 
#Почему параметр coord_fixed() важен? 
#Для чего предназначен geom_abline()?
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) + geom_point() + geom_abline() + coord_fixed()
####----------->
#geom_abline() используется для построения линий, определяемых параметрами наклона (a) и пересечения (b).
#При использовании без аргументов, как здесь, он будет строить линию с наклоном 1 и точкой пересечения 0,
#таким образом, проходя через начало координат под углом 45 градусов.
####----------->
#coord_fixed(): важен, потому что x и y имеют одинаковые единицы измерения,
# поэтому мы хотим сохранить наклон линии и увидеть, что пробег по городу хуже, чем по шоссе,
# но что более важно, это лучше объяснить постоянным смещением,чем мультипликативным коэффициентом.

###################################################### fin #################################################
